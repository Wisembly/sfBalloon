<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $short
 * @property string $short_description
 * @property string $landing_html
 * @property string $logo
 * @property string $password
 * @property string $lang
 * @property boolean $redirect
 * @property boolean $has_custom_css
 * @property integer $wall_count
 * @property Doctrine_Collection $Walls
 * @property Subscription $Subscription
 * @property Doctrine_Collection $Auth
 * @property Doctrine_Collection $Invitation
 * 
 * @method string              getName()              Returns the current record's "name" value
 * @method string              getShort()             Returns the current record's "short" value
 * @method string              getShortDescription()  Returns the current record's "short_description" value
 * @method string              getLandingHtml()       Returns the current record's "landing_html" value
 * @method string              getLogo()              Returns the current record's "logo" value
 * @method string              getPassword()          Returns the current record's "password" value
 * @method string              getLang()              Returns the current record's "lang" value
 * @method boolean             getRedirect()          Returns the current record's "redirect" value
 * @method boolean             getHasCustomCss()      Returns the current record's "has_custom_css" value
 * @method integer             getWallCount()         Returns the current record's "wall_count" value
 * @method Doctrine_Collection getWalls()             Returns the current record's "Walls" collection
 * @method Subscription        getSubscription()      Returns the current record's "Subscription" value
 * @method Doctrine_Collection getAuth()              Returns the current record's "Auth" collection
 * @method Doctrine_Collection getInvitation()        Returns the current record's "Invitation" collection
 * @method Event               setName()              Sets the current record's "name" value
 * @method Event               setShort()             Sets the current record's "short" value
 * @method Event               setShortDescription()  Sets the current record's "short_description" value
 * @method Event               setLandingHtml()       Sets the current record's "landing_html" value
 * @method Event               setLogo()              Sets the current record's "logo" value
 * @method Event               setPassword()          Sets the current record's "password" value
 * @method Event               setLang()              Sets the current record's "lang" value
 * @method Event               setRedirect()          Sets the current record's "redirect" value
 * @method Event               setHasCustomCss()      Sets the current record's "has_custom_css" value
 * @method Event               setWallCount()         Sets the current record's "wall_count" value
 * @method Event               setWalls()             Sets the current record's "Walls" collection
 * @method Event               setSubscription()      Sets the current record's "Subscription" value
 * @method Event               setAuth()              Sets the current record's "Auth" collection
 * @method Event               setInvitation()        Sets the current record's "Invitation" collection
 * 
 * @package    balloon
 * @subpackage model
 * @author     ClÃ©ment JOBEILI <clement.jobeili@gmail.com>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('name', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('short', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 20,
             ));
        $this->hasColumn('short_description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('landing_html', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('logo', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('lang', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             ));
        $this->hasColumn('redirect', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('has_custom_css', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('wall_count', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Wall as Walls', array(
             'local' => 'id',
             'foreign' => 'event_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasOne('Subscription', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('Auth', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('Invitation', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}