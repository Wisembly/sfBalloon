## Il manque les liaisons Event -> Auth, Auth vers group, Group vers Auth
## Subscription : On ne delete pas en cascade a la supression d'un User. Je pense qu'il faut garder TOUT l'historique des subscriptions, du coup, ptet y rajouter un ou deux champs qui permettraient de garder le Nom Prénom Sté de la personne ayant souscrit. Et passer uid à NULL

sfGuardUser:
  actAs:
    Timestampable: ~
    SoftDelete: ~
  columns:
    is_root:            { type: boolean, default: 0 }
  indexes:
    is_active_idx:
      fields: [is_active]
  relations:
    Subscription:       { local: id, foreign: user_id }
    Auth:               { local: id, foreign: user_id }
    Votes:              { type: many, class: Vote, local: id, foreign: user_id }
    
Subscription:
  actAs:
    Timestampable: ~
  columns:          
    user_id:            { type: integer }
    event_id:           { type: integer }
    selected_offer:     { type: integer(2) } # id de la table qui gardera les configs défaut de l'event/Wall en fonction des offres/options
  relations:
    User:               { foreignType: one, class: sfGuardUser, local: user_id, foreign: id, onDelete: SET NULL } 
    Event:              { foreignType: one, local: event_id, foreign: id , onDelete: SET NULL }

Auth:
  columns:
    user_id:            { type: integer }
    event_id:           { type: integer }
    group_id:           { type: integer }
  relations:
    User:               { foreignType: one, class: sfGuardUser, local: user_id, foreign: id, onDelete: CASCADE }
    Event:              { type: one, local: event_id, foreign: id, onDelete: CASCADE } # On delete le tuple non si plus d'Event à gêrer
    Group:              { type: one, class: AuthGroup, local: group_id, foreign: id, onDelete: CASCADE } # Idem, si plus de groupe correspondant, on del Event.
      
AuthGroup:
  columns:
    name:               { type: string(255) }

Event:
  actAs:
    Timestampable: ~
    SoftDelete: ~
  columns:
    name:               { type: string(150), notnull: true }
    short:              { type: string(20), notnull: true, unique: true }
    short_description:  { type: string(255) }
    landing_html:       { type: string(255) }
    logo:               { type: string(255), notnull: true } # ça devait pas être un unique id?
    password:           { type: string(255) }
    redirect:           { type: boolean, default: 0 }
    has_custom_css:     { type: boolean, default: 0 }
    wall_count:         { type: integer, default: 0 }
  relations:
    Walls:              { type: many, class: Wall, local: id, foreign: event_id, cascade: [delete] }
    Subscription:       { local: id, foreign: event_id }
    
Wall:
  actAs:
    Timestampable: ~
    SoftDelete: ~
    Sluggable:
      name: short
      unique: true
      fields: [name]
      canUpdate: true
    CountCache:
      relations:
        Event:
          columnName: wall_count
          foreignAlias: Walls
  columns:
    event_id:           { type: integer }
    name:               { type: string(150), notnull: true }
    tw_hashtag:         { type: string(100) }
    sms_hashtag:        { type: string(20) }
    last_tweet_id:      { type: string(50) }
    lang:               { type: string(5) }
    short_description:  { type: text }
    start:              { type: timestamp, notnull: true }
    stop:               { type: timestamp, notnull: true }
    real_start_date:    { type: timestamp, notnull: true }
    is_moderated:       { type: boolean, default: 0 }
    alaune_quote_id:    { type: integer } # Toggle fullscreen with quote id (null if not)
    survey:             { type: integer } # Sondage en cours, avec id
    feedback:           { type: string(255) }
    has_custom_css:     { type: boolean, default: 0 }
  relations:
    Event:              { type: one, foreign: id, local: event_id }
    Quotes:             { type: many, class: Quote, local: id, foreign: wall_id, cascade: [delete] }
    
Quote:
  actAs:
    Timestampable: ~
    SoftDelete: ~
  columns:
    wall_id:            { type: integer }
    user_id:            { type: integer }
    source_id:          { type: integer }
    tw_username:        { type: string(30) }
    quote:              { type: string(255), notnull: true }
    votes_count:        { type: integer, default: 0 }
    has_answer:         { type: boolean, default: 0 }
    is_validated:       { type: boolean, default: 0 }
    is_poll:            { type: boolean, default: 0 }
    token:              { type: string(40) } # taille d'un sha1
    tweet_id:           { type: string(50) } # fixé à 50 dans Wall
    is_favori:          { type: boolean, default: 0 }
  relations:
    Wall:               { type: one, foreign: id, local: wall_id }
    User:               { type: one, class: sfGuardUser, local: user_id, foreign: id, onDelete: SET NULL }
    Source:             { type: one, foreign: id, local: source_id, onDelete: SET NULL }
    Answers:            { type: many, class: Answer, local: id, foreign: quote_id, cascade: [delete] }
    PollChoices:        { type: many, class: PollChoice, local: id, foreign: quote_id, cascade: [delete] }
    PollAnswers:        { type: many, class: PollAnswer, local: id, foreign: quote_id }
    Votes:              { type: many, class: Vote, local: id, foreign: quote_id }

Answer:
  actAs:
    Timestampable: ~
    SoftDelete: ~
  columns:
    quote_id:           { type: integer }
    user_id:            { type: integer }
    answer:             { type: text, notnull: true }
  relations:
    Quote:              { type: one, foreign: id, local: quote_id }
    User:               { type: one, class: sfGuardUser, local: user_id, foreign: id, onDelete: SET NULL }
    
Source:
  actAs:
    Sluggable:
      name: small_title
      unique: true
      fields: [title]
      canUpdate: true
  columns:
    title:              { type: string(25), notnull: true }
    
PollChoice:
  actAs:
    SoftDelete: ~
  columns:
    quote_id:           { type: integer, notnull: true }
    choice_value:       { type: string(150), notnull: true }
    votes_count:        { type: integer, default: 0 }
  relations:
    Quote:              { type: one, foreign: id, local: quote_id }
    Answers:            { type: many, class: PollAnswer, local: id, foreign: choice_id }
    
PollAnswer:
  actAs:
    CountCache:
      relations:
        Choice:
          columnName: votes_count
          foreignAlias: Answers
  columns:
    choice_id:          { type: integer, notnull: true }
    quote_id:           { type: integer, notnull: true }
    source_id:          { type: integer }
    user_id:            { type: integer }
    token:              { type: string(40), notnull: true }
  relations:
    Choice:             { type: one, class: PollChoice, foreign: id, local: choice_id, onDelete: CASCADE }
    Quote:              { type: one, foreign: id, local: quote_id, onDelete: CASCADE }
    Source:             { type: one, foreign: id, local: source_id, onDelete: SET NULL }
    User:               { type: one, class: sfGuardUser, local: user_id, foreign: id, onDelete: CASCADE }

Vote:
  actAs:
    Timestampable: ~
    CountCache:
      relations:
        Quote:
          columnName: votes_count
          foreignAlias: Votes
  columns:
    quote_id:           { type: integer, notnull: true }
    user_id:            { type: integer }
    token:              { type: string(40), notnull: true }
  relations:
    Quote:              { type: one, foreign: id, local: quote_id, onDelete: CASCADE }
    User:               { type: one, class: sfGuardUser, local: user_id, foreign: id, onDelete: CASCADE }
    
#stats
StatUser:
  columns:
    user_id:            { type: integer, notnull: true }
    total_quotes:       { type: integer, notnull: true, default: 0 }
    validated_quotes:   { type: integer, notnull: true, default: 0 }
    total_votes:        { type: integer, notnull: true, default: 0 }
    votes_for_quotes:   { type: integer, notnull: true, default: 0 }
    answered_questions: { type: integer, notnull: true, default: 0 }
    events_used:        { type: integer, notnull: true, default: 0 }
    walls_used:         { type: integer, notnull: true, default: 0 }
  relations:
    User:               { type: one, class: sfGuardUser, local: user_id, foreign: id }
    
StatWall:
  columns:
    wall_id:            { type: integer, notnull: true }
    total_questions:    { type: integer, notnull: true, default: 0 }
    validated_questions: { type: integer, notnull: true, default: 0 }
    total_votes:        { type: integer, notnull: true, default: 0 }
    max_connceted_users: { type: integer, notnull: true, default: 0 }
  relations:
    Wall:               { type: one, foreign: id, local: wall_id }